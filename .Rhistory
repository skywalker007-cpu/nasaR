sol_row$AT_ct <- NA
}
if ("PRE" %in% names(sol_data)) {
sol_row$PRE_avg <- sol_data$PRE$av
sol_row$PRE_min <- sol_data$PRE$mn
sol_row$PRE_max <- sol_data$PRE$mx
sol_row$PRE_ct <- sol_data$PRE$ct
} else {
sol_row$PRE_avg <- NA
sol_row$PRE_min <- NA
sol_row$PRE_max <- NA
sol_row$PRE_ct <- NA
}
if ("HWS" %in% names(sol_data)) {
sol_row$HWS_avg <- sol_data$HWS$av
sol_row$HWS_min <- sol_data$HWS$mn
sol_row$HWS_max <- sol_data$HWS$mx
sol_row$HWS_ct <- sol_data$HWS$ct
} else {
sol_row$HWS_avg <- NA
sol_row$HWS_min <- NA
sol_row$HWS_max <- NA
sol_row$HWS_ct <- NA
}
if ("WD" %in% names(sol_data) && "most_common" %in% names(sol_data$WD)) {
wd_most_common <- sol_data$WD$most_common
sol_row$WD_most_common_compass_degrees <- wd_most_common$compass_degrees
sol_row$WD_most_common_compass_point <- wd_most_common$compass_point
sol_row$WD_most_common_ct <- wd_most_common$ct
} else {
sol_row$WD_most_common_compass_degrees <- NA
sol_row$WD_most_common_compass_point <- NA
sol_row$WD_most_common_ct <- NA
}
sol_row$First_UTC <- if ("First_UTC" %in% names(sol_data)) sol_data$First_UTC else NA
sol_row$Last_UTC <- if ("Last_UTC" %in% names(sol_data)) sol_data$Last_UTC else NA
sol_row$Season <- if ("Season" %in% names(sol_data)) sol_data$Season else NA
sol_list[[sol]] <- sol_row
}
if (!is.null(sol_data$AT)) {
sol_row$AT_avg <- as.numeric(sol_data$AT$av) %||% NA
sol_row$AT_min <- as.numeric(sol_data$AT$mn) %||% NA
sol_row$AT_max <- as.numeric(sol_data$AT$mx) %||% NA
} else {
sol_row$AT_avg <- NA
sol_row$AT_min <- NA
sol_row$AT_max <- NA
}
weather_df <- bind_rows(sol_list)
return(weather_df)
}
api_key <- "XFsDPHBjdABhXfquwqnJSfhwEY4rCZI2ev2NDU0K"
weather_df <- get_mars_weather(
api_key = api_key,
version = 1.0
)
#' Get Mars Weather Data
#' Fetches weather data from NASA’s InSight mission for recent Martian sols.
#'
#' @param api_key NASA API key, defaults to "DEMO_KEY".
#' @param version API version number, defaults to 1.0.
#' @return Data frame with weather details (temperature, pressure, wind) per sol.
#' @export
get_mars_weather <- function(
api_key = "DEMO_KEY",
version = 1.0
) {
if (!require(httr)) install.packages("httr")
if (!require(jsonlite)) install.packages("jsonlite")
if (!require(tidyr)) install.packages("tidyr")
if (!require(dplyr)) install.packages("dplyr")
library(httr)
library(jsonlite)
library(tidyr)
library(dplyr)
feedtype = "json"
base_url <- "https://api.nasa.gov/insight_weather/"
if (tolower(feedtype) != "json") {
warning("The API only supports 'json' as the feedtype. Setting feedtype to 'json'.")
feedtype <- "json"
}
query_params <- list(
ver = version,
feedtype = feedtype,
api_key = api_key
)
response <- GET(
url = base_url,
query = query_params
)
if (status_code(response) != 200) {
stop("Error: Failed to retrieve data. HTTP Status Code: ", status_code(response), "\n",
content(response, "text"))
}
weather_data <- fromJSON(content(response, "text", encoding = "UTF-8"))
sol_keys <- names(weather_data)[!names(weather_data) %in% c("sol_hours_with_data", "validity_checks")]
if (length(sol_keys) == 0) {
stop("No sol data available in the response.")
}
sol_list <- list()
for (sol in sol_keys) {
sol_data <- as.list(weather_data[[sol]])
sol_row <- list(sol = as.numeric(sol))
if ("AT" %in% names(sol_data)) {
sol_row$AT_avg <- sol_data$AT$av
sol_row$AT_min <- sol_data$AT$mn
sol_row$AT_max <- sol_data$AT$mx
sol_row$AT_ct <- sol_data$AT$ct
} else {
sol_row$AT_avg <- NA
sol_row$AT_min <- NA
sol_row$AT_max <- NA
sol_row$AT_ct <- NA
}
if ("PRE" %in% names(sol_data)) {
sol_row$PRE_avg <- sol_data$PRE$av
sol_row$PRE_min <- sol_data$PRE$mn
sol_row$PRE_max <- sol_data$PRE$mx
sol_row$PRE_ct <- sol_data$PRE$ct
} else {
sol_row$PRE_avg <- NA
sol_row$PRE_min <- NA
sol_row$PRE_max <- NA
sol_row$PRE_ct <- NA
}
if ("HWS" %in% names(sol_data)) {
sol_row$HWS_avg <- sol_data$HWS$av
sol_row$HWS_min <- sol_data$HWS$mn
sol_row$HWS_max <- sol_data$HWS$mx
sol_row$HWS_ct <- sol_data$HWS$ct
} else {
sol_row$HWS_avg <- NA
sol_row$HWS_min <- NA
sol_row$HWS_max <- NA
sol_row$HWS_ct <- NA
}
if ("WD" %in% names(sol_data) && "most_common" %in% names(sol_data$WD)) {
wd_most_common <- sol_data$WD$most_common
sol_row$WD_most_common_compass_degrees <- wd_most_common$compass_degrees
sol_row$WD_most_common_compass_point <- wd_most_common$compass_point
sol_row$WD_most_common_ct <- wd_most_common$ct
} else {
sol_row$WD_most_common_compass_degrees <- NA
sol_row$WD_most_common_compass_point <- NA
sol_row$WD_most_common_ct <- NA
}
sol_row$First_UTC <- if ("First_UTC" %in% names(sol_data)) sol_data$First_UTC else NA
sol_row$Last_UTC <- if ("Last_UTC" %in% names(sol_data)) sol_data$Last_UTC else NA
sol_row$Season <- if ("Season" %in% names(sol_data)) sol_data$Season else NA
sol_list[[sol]] <- sol_row
}
if (!is.null(sol_data$AT)) {
sol_row$AT_avg <- as.numeric(sol_data$AT$av) %||% NA
sol_row$AT_min <- as.numeric(sol_data$AT$mn) %||% NA
sol_row$AT_max <- as.numeric(sol_data$AT$mx) %||% NA
} else {
sol_row$AT_avg <- NA
sol_row$AT_min <- NA
sol_row$AT_max <- NA
}
weather_df <- bind_rows(sol_list)
return(weather_df)
}
api_key <- "XFsDPHBjdABhXfquwqnJSfhwEY4rCZI2ev2NDU0K"
weather_df <- get_mars_weather(
api_key = api_key,
version = 1.0
)
print("Weather data as a data frame:")
print(head(weather_df))
devtools::test()
devtools::test()
library(vcr)
library("vcr")
install.packages("webmockr")
install.packages("webmockr")
devtools::test()
devtools::test()
devtools::test()
rm tests/testthat/fixtures/get_earth_polychromatic_integration.yml
file.remove("tests/testthat/fixtures/get_earth_polychromatic_integration.yml")
devtools::test()
#' Get Mars Weather Data
#' Fetches weather data from NASA’s InSight mission for recent Martian sols.
#'
#' @param api_key NASA API key, defaults to "DEMO_KEY".
#' @param version API version number, defaults to 1.0.
#' @return Data frame with weather details (temperature, pressure, wind) per sol.
#' @export
get_mars_weather <- function(
api_key = "DEMO_KEY",
version = 1.0
) {
if (!require(httr)) install.packages("httr")
if (!require(jsonlite)) install.packages("jsonlite")
if (!require(tidyr)) install.packages("tidyr")
if (!require(dplyr)) install.packages("dplyr")
library(httr)
library(jsonlite)
library(tidyr)
library(dplyr)
feedtype = "json"
base_url <- "https://api.nasa.gov/insight_weather/"
if (tolower(feedtype) != "json") {
warning("The API only supports 'json' as the feedtype. Setting feedtype to 'json'.")
feedtype <- "json"
}
query_params <- list(
ver = version,
feedtype = feedtype,
api_key = api_key
)
response <- GET(
url = base_url,
query = query_params
)
if (status_code(response) != 200) {
stop("Error: Failed to retrieve data. HTTP Status Code: ", status_code(response), "\n",
content(response, "text"))
}
weather_data <- fromJSON(content(response, "text", encoding = "UTF-8"))
sol_keys <- names(weather_data)[!names(weather_data) %in% c("sol_hours_with_data", "validity_checks")]
if (length(sol_keys) == 0) {
stop("No sol data available in the response.")
}
sol_list <- list()
for (sol in sol_keys) {
sol_num <- as.numeric(sol)
if (is.na(sol_num)) next
sol_data <- as.list(weather_data[[sol]])
sol_row <- list(sol = as.numeric(sol))
if ("AT" %in% names(sol_data)) {
sol_row$AT_avg <- sol_data$AT$av
sol_row$AT_min <- sol_data$AT$mn
sol_row$AT_max <- sol_data$AT$mx
sol_row$AT_ct <- sol_data$AT$ct
} else {
sol_row$AT_avg <- NA
sol_row$AT_min <- NA
sol_row$AT_max <- NA
sol_row$AT_ct <- NA
}
if ("PRE" %in% names(sol_data)) {
sol_row$PRE_avg <- sol_data$PRE$av
sol_row$PRE_min <- sol_data$PRE$mn
sol_row$PRE_max <- sol_data$PRE$mx
sol_row$PRE_ct <- sol_data$PRE$ct
} else {
sol_row$PRE_avg <- NA
sol_row$PRE_min <- NA
sol_row$PRE_max <- NA
sol_row$PRE_ct <- NA
}
if ("HWS" %in% names(sol_data)) {
sol_row$HWS_avg <- sol_data$HWS$av
sol_row$HWS_min <- sol_data$HWS$mn
sol_row$HWS_max <- sol_data$HWS$mx
sol_row$HWS_ct <- sol_data$HWS$ct
} else {
sol_row$HWS_avg <- NA
sol_row$HWS_min <- NA
sol_row$HWS_max <- NA
sol_row$HWS_ct <- NA
}
if ("WD" %in% names(sol_data) && "most_common" %in% names(sol_data$WD)) {
wd_most_common <- sol_data$WD$most_common
sol_row$WD_most_common_compass_degrees <- wd_most_common$compass_degrees
sol_row$WD_most_common_compass_point <- wd_most_common$compass_point
sol_row$WD_most_common_ct <- wd_most_common$ct
} else {
sol_row$WD_most_common_compass_degrees <- NA
sol_row$WD_most_common_compass_point <- NA
sol_row$WD_most_common_ct <- NA
}
sol_row$First_UTC <- if ("First_UTC" %in% names(sol_data)) sol_data$First_UTC else NA
sol_row$Last_UTC <- if ("Last_UTC" %in% names(sol_data)) sol_data$Last_UTC else NA
sol_row$Season <- if ("Season" %in% names(sol_data)) sol_data$Season else NA
sol_list[[sol]] <- sol_row
}
if (!is.null(sol_data$AT)) {
sol_row$AT_avg <- as.numeric(sol_data$AT$av) %||% NA
sol_row$AT_min <- as.numeric(sol_data$AT$mn) %||% NA
sol_row$AT_max <- as.numeric(sol_data$AT$mx) %||% NA
} else {
sol_row$AT_avg <- NA
sol_row$AT_min <- NA
sol_row$AT_max <- NA
}
weather_df <- bind_rows(sol_list)
return(weather_df)
}
api_key <- "XFsDPHBjdABhXfquwqnJSfhwEY4rCZI2ev2NDU0K"
weather_df <- get_mars_weather(
api_key = api_key,
version = 1.0
)
print("Weather data as a data frame:")
print(head(weather_df))
#' Get Landsat Earth Imagery
#' Fetches Landsat imagery for a location and date, with optional save.
#'
#' @param api_key NASA API key, defaults to "DEMO_KEY".
#' @param lat Latitude (-90 to 90), required.
#' @param lon Longitude (-180 to 180), required.
#' @param dim Image size in degrees, defaults to 0.025.
#' @param date Date (YYYY-MM-DD), defaults to today.
#' @param cloud_score Include cloud score, defaults to FALSE.
#' @param download_image Save image, defaults to FALSE.
#' @return List with message, file path, and raw image data.
#' @export
get_earth_landsat_imagery <- function(
api_key = "DEMO_KEY",
lat = NA,
lon = NA,
dim = 0.025,
date = Sys.Date(),
cloud_score = FALSE,
download_image = FALSE
) {
if (!require(httr)) install.packages("httr")
if (!require(jsonlite)) install.packages("jsonlite")
library(httr)
library(jsonlite)
base_url <- "https://api.nasa.gov/planetary/earth/imagery"
if (is.na(lat) || is.na(lon)) {
stop("Both 'lat' and 'lon' must be provided.")
}
if (is.character(date)) {
date <- as.Date(date)
} else {
date <- as.Date(date, origin = "1970-01-01")
}
formatted_date <- format(date, "%Y-%m-%d")
query_params <- list(
lat = lat,
lon = lon,
dim = dim,
date = formatted_date,
cloud_score = tolower(as.character(cloud_score)),
api_key = api_key
)
response <- GET(
url = base_url,
query = query_params
)
if (status_code(response) != 200) {
stop("Error: Failed to retrieve image. HTTP Status Code: ", status_code(response), "\n",
content(response, "text"))
}
image_data <- content(response, "raw")
if (download_image) {
image_file <- paste0("nasa_earth_image_", formatted_date, ".png")
writeBin(image_data, image_file)
}
return(list(
message = if (download_image) paste("Image saved as:", image_file) else "Image not saved",
file_path = if (download_image) image_file else NULL,
raw_data = image_data
))
}
api_key <- "XFsDPHBjdABhXfquwqnJSfhwEY4rCZI2ev2NDU0K"
result <- get_earth_landsat_imagery(api_key = api_key, lat = 49.93944, lon = -119.39476, date = "2024-06-26", dim = 0.1, download_image = TRUE)
result
devtools::test()
rm tests/testthat/fixtures/get_earth_polychromatic_integration.yml
file.remove("tests/testthat/fixtures/get_earth_polychromatic_integration.yml")
devtools::test()
devtools::test()
file.remove("tests/testthat/fixtures/get_earth_polychromatic_integration.yml")
devtools::test()
devtools::test()
#' Get Mars Weather Data
#' Fetches weather data from NASA’s InSight mission for recent Martian sols.
#'
#' @param api_key NASA API key, defaults to "DEMO_KEY".
#' @param version API version number, defaults to 1.0.
#' @return Data frame with weather details (temperature, pressure, wind) per sol.
#' @export
get_mars_weather <- function(
api_key = "DEMO_KEY",
version = 1.0
) {
if (!require(httr)) install.packages("httr")
if (!require(jsonlite)) install.packages("jsonlite")
if (!require(tidyr)) install.packages("tidyr")
if (!require(dplyr)) install.packages("dplyr")
library(httr)
library(jsonlite)
library(tidyr)
library(dplyr)
feedtype = "json"
base_url <- "https://api.nasa.gov/insight_weather/"
if (tolower(feedtype) != "json") {
warning("The API only supports 'json' as the feedtype. Setting feedtype to 'json'.")
feedtype <- "json"
}
query_params <- list(
ver = version,
feedtype = feedtype,
api_key = api_key
)
response <- GET(
url = base_url,
query = query_params
)
if (status_code(response) != 200) {
stop("Error: Failed to retrieve data. HTTP Status Code: ", status_code(response), "\n",
content(response, "text"))
}
weather_data <- fromJSON(content(response, "text", encoding = "UTF-8"))
sol_keys <- names(weather_data)[!names(weather_data) %in% c("sol_hours_with_data", "validity_checks")]
if (length(sol_keys) == 0) {
stop("No sol data available in the response.")
}
sol_list <- list()
for (sol in sol_keys) {
sol_num <- as.numeric(sol)
if (is.na(sol_num)) next
sol_data <- as.list(weather_data[[sol]])
sol_row <- list(sol = as.numeric(sol))
if ("AT" %in% names(sol_data)) {
sol_row$AT_avg <- sol_data$AT$av
sol_row$AT_min <- sol_data$AT$mn
sol_row$AT_max <- sol_data$AT$mx
sol_row$AT_ct <- sol_data$AT$ct
} else {
sol_row$AT_avg <- NA
sol_row$AT_min <- NA
sol_row$AT_max <- NA
sol_row$AT_ct <- NA
}
if ("PRE" %in% names(sol_data)) {
sol_row$PRE_avg <- sol_data$PRE$av
sol_row$PRE_min <- sol_data$PRE$mn
sol_row$PRE_max <- sol_data$PRE$mx
sol_row$PRE_ct <- sol_data$PRE$ct
} else {
sol_row$PRE_avg <- NA
sol_row$PRE_min <- NA
sol_row$PRE_max <- NA
sol_row$PRE_ct <- NA
}
if ("HWS" %in% names(sol_data)) {
sol_row$HWS_avg <- sol_data$HWS$av
sol_row$HWS_min <- sol_data$HWS$mn
sol_row$HWS_max <- sol_data$HWS$mx
sol_row$HWS_ct <- sol_data$HWS$ct
} else {
sol_row$HWS_avg <- NA
sol_row$HWS_min <- NA
sol_row$HWS_max <- NA
sol_row$HWS_ct <- NA
}
if ("WD" %in% names(sol_data) && "most_common" %in% names(sol_data$WD)) {
wd_most_common <- sol_data$WD$most_common
sol_row$WD_most_common_compass_degrees <- wd_most_common$compass_degrees
sol_row$WD_most_common_compass_point <- wd_most_common$compass_point
sol_row$WD_most_common_ct <- wd_most_common$ct
} else {
sol_row$WD_most_common_compass_degrees <- NA
sol_row$WD_most_common_compass_point <- NA
sol_row$WD_most_common_ct <- NA
}
sol_row$First_UTC <- if ("First_UTC" %in% names(sol_data)) sol_data$First_UTC else NA
sol_row$Last_UTC <- if ("Last_UTC" %in% names(sol_data)) sol_data$Last_UTC else NA
sol_row$Season <- if ("Season" %in% names(sol_data)) sol_data$Season else NA
sol_list[[sol]] <- sol_row
}
if (!is.null(sol_data$AT)) {
sol_row$AT_avg <- ifelse(!is.null(sol_data$AT$av), as.numeric(sol_data$AT$av), NA)
sol_row$AT_min <- ifelse(!is.null(sol_data$AT$mn), as.numeric(sol_data$AT$mn), NA)
sol_row$AT_max <- ifelse(!is.null(sol_data$AT$mx), as.numeric(sol_data$AT$mx), NA)
} else {
sol_row$AT_avg <- NA
sol_row$AT_min <- NA
sol_row$AT_max <- NA
}
weather_df <- bind_rows(sol_list)
return(weather_df)
}
api_key <- "XFsDPHBjdABhXfquwqnJSfhwEY4rCZI2ev2NDU0K"
weather_df <- get_mars_weather(
api_key = api_key,
version = 1.0
)
print("Weather data as a data frame:")
print(head(weather_df))
file.remove("tests/testthat/fixtures/get_earth_polychromatic_integration.yml")
devtools::test()
file.remove("tests/testthat/fixtures/get_earth_polychromatic_integration.yml")
file.remove("tests/testthat/fixtures/get_earth_polychromatic_integration.yml")
devtools::test()
devtools::test()
file.remove("tests/testthat/fixtures/get_earth_polychromatic_integration.yml")
devtools::test()
devtools::test()
devtools::test(filter = "^test-[^integration]")
devtools::test(filter = "^test-[^integration]")
devtools::test(filter = "integration")
devtools::test(filter = "^test-(?!integration)")
devtools::test()
devtools::test(filter = "^test-(?!integration)")
devtools::test(filter = "^test-[^i]")
devtools::test(filter = "^test-.*(?!integration)")
devtools::test(filter = "^test-[^i]")
rlang::last_trace()
devtools::test(file = "test-integration.R")
testthat::test_dir("tests/testthat", filter = "test-integration")
rlang::last_trace()
testthat::test_file("tests/testthat/test-integration.R")
devtools::test()
devtools::test()
